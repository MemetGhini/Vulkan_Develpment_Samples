#version 450
#extension GL_EXT_tessellation_shader : enable
layout (push_constant) uniform constantVals { //推送常量块
layout(offset = 0) mat4 mvp; //总变换矩阵
layout(offset = 64) mat4 mm; //基本变换矩阵
} myConstantVals;
layout( triangles, equal_spacing, cw) in; //设置为进行三角形切分
layout (location = 0) in vec3 tesNormal[]; //细分前三角形三个点的法向量
layout (location = 1) in vec2 tesTexCoor[]; //细分前三角形三个点的纹理坐标
layout (location = 0) out vec3 teNormal; //输出到片元着色器的法向量
layout (location = 1) out vec2 vTexCoor; //输出到片元着色器的纹理坐标
layout (location = 2) out vec3 vPosition; //输出到片元着色器的位置坐标
vec3 PNCalInterpolation( //计算插值点位置坐标与纹理坐标的方法
vec3 p1,vec3 p2,vec3 p3,vec3 n1,vec3 n2,vec3 n3,float u,float v,float w){
vec3 b300 = p1;vec3 b030 = p2;vec3 b003 = p3; //记录PN 三角形三个顶点的位置坐标
float w12 = dot( p2 - p1, n1 );float w21 = dot( p1 - p2, n2 );//用于计算PN 三角形控制点的辅助变量
float w13 = dot( p3 - p1, n1 );float w31 = dot( p1 - p3, n3 );
float w23 = dot( p3 - p2, n2 );float w32 = dot( p2 - p3, n3 );
vec3 b210 = ( 2.*p1 + p2 - w12*n1 ) / 3.; //计算PN 三角形三条边上的6 个控制点的位置坐标
vec3 b120 = ( 2.*p2 + p1 - w21*n2 ) / 3.;
vec3 b021 = ( 2.*p2 + p3 - w23*n2 ) / 3.;
vec3 b012 = ( 2.*p3 + p2 - w32*n3 ) / 3.;
vec3 b102 = ( 2.*p3 + p1 - w31*n3 ) / 3.;
vec3 b201 = ( 2.*p1 + p3 - w13*n1 ) / 3.;
vec3 ee = (b210+b120+b021+b012+b102+b201 )/6; //用于计算控制点b111 位置坐标的辅助变量
vec3 vv = ( p1 + p2 + p3 ) / 3.;
vec3 b111 = ee + ( ee - vv ) / 2.; //计算PN 三角形中间控制点b111 的位置坐标
vec3 xyz=1.*b300*w*w*w + 1.*b030*u*u*u + 1.*b003*v*v*v +//根据公式计算插值点的位置坐标
3.*b210*u*w*w + 3.*b120*u*u*w + 3.*b201*v*w*w +
3.*b021*u*u*v + 3.*b102*v*v*w + 3.*b012*u*v*v +
6.*b111*u*v*w;
return xyz; //返回结果
}
vec3 PNCalNormal( //计算插值点法向量的方法
vec3 p1,vec3 p2,vec3 p3,vec3 n1,vec3 n2,vec3 n3,float u,float v,float w){
float v12 = 2. * dot( p2-p1, n1+n2 ) / dot( p2-p1, p2-p1 );//计算PN 三角形控制点法向量的辅助变量
float v23 = 2. * dot( p3-p2, n2+n3 ) / dot( p3-p2, p3-p2 );
float v31 = 2. * dot( p1-p3, n3+n1 ) / dot( p1-p3, p1-p3 );
vec3 n200 = n1;vec3 n020 = n2;vec3 n002 = n3; //记录PN 三角形三个顶点的法向量
vec3 n110 = normalize( n1 + n2 - v12*(p2-p1) );//计算并规格化PN 三角形其余三个控制点的法向量
vec3 n011 = normalize( n2 + n3 - v23*(p3-p2) );
vec3 n101 = normalize( n3 + n1 - v31*(p1-p3) );
vec3 currNormal = n200*w*w + //根据公式计算当前插值点的法向量
n020*u*u + n002*v*v + n110*w*u + n011*u*v + n101*w*v;
return normalize(currNormal); //规格化求得的法向量并返回
}
void main( ){ //主函数
vec3 p1 = gl_in[0].gl_Position.xyz; //获取细分前三角形三个点的坐标
vec3 p2 = gl_in[1].gl_Position.xyz;vec3 p3 = gl_in[2].gl_Position.xyz;
vec3 n1 = tesNormal[0];vec3 n2=tesNormal[1];vec3 n3=tesNormal[2];//细分前三角形三个点的法向量
vec3 t1 = vec3(tesTexCoor[0],0); //获取细分前三角形三个点的纹理坐标
vec3 t2 = vec3(tesTexCoor[1],0);vec3 t3 = vec3(tesTexCoor[2],0);
float u = gl_TessCoord.x; //获取当前细分所得插值点的质心坐标u 分量
float v = gl_TessCoord.y; //获取当前细分所得插值点的质心坐标v 分量
float w = gl_TessCoord.z; //获取当前细分所得插值点的质心坐标w 分量
vec3 currPosition=PNCalInterpolation(p1,p2,p3,n1,n2,n3,u,v,w);//计算当前插值点细分变换后位置坐标
vPosition=(myConstantVals.mm*vec4(currPosition,1)).xyz; //计算当前插值点世界坐标系坐标
gl_Position=myConstantVals.mvp*vec4(currPosition,1);//将当前插值点的最终绘制位置传给渲染管线
vec3 tempTexCoor=PNCalInterpolation(t1,t2,t3,n1,n2,n3,u,v,w); //计算出当前插值点的纹理坐标
vTexCoor= tempTexCoor.st; //将当前插值点的纹理坐标传给片元着色器
vec3 currNormal=PNCalNormal(p1,p2,p3,n1,n2,n3,u,v,w); //计算出当前插值点的法向量
vec4 fxlStart=vec4(0,0,0,1); //法向量起点
vec4 fxlEnd=vec4(currNormal,1); //法向量终点
teNormal=(fxlEnd-fxlStart).xyz; //将变换后的法向量(世界坐标系)传给片元着色器
}